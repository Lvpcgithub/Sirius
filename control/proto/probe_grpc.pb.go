// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.0
// source: proto/probe.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProbeTaskService_SendProbeTasks_FullMethodName = "/probe.ProbeTaskService/SendProbeTasks"
)

// ProbeTaskServiceClient is the client API for ProbeTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 控制面向数据面发多个探测任务
type ProbeTaskServiceClient interface {
	// 发起探测任务，返回任务执行的状态
	SendProbeTasks(ctx context.Context, in *ProbeTaskRequest, opts ...grpc.CallOption) (*ProbeTaskResponse, error)
}

type probeTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeTaskServiceClient(cc grpc.ClientConnInterface) ProbeTaskServiceClient {
	return &probeTaskServiceClient{cc}
}

func (c *probeTaskServiceClient) SendProbeTasks(ctx context.Context, in *ProbeTaskRequest, opts ...grpc.CallOption) (*ProbeTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProbeTaskResponse)
	err := c.cc.Invoke(ctx, ProbeTaskService_SendProbeTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProbeTaskServiceServer is the server API for ProbeTaskService service.
// All implementations must embed UnimplementedProbeTaskServiceServer
// for forward compatibility.
//
// 控制面向数据面发多个探测任务
type ProbeTaskServiceServer interface {
	// 发起探测任务，返回任务执行的状态
	SendProbeTasks(context.Context, *ProbeTaskRequest) (*ProbeTaskResponse, error)
	mustEmbedUnimplementedProbeTaskServiceServer()
}

// UnimplementedProbeTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProbeTaskServiceServer struct{}

func (UnimplementedProbeTaskServiceServer) SendProbeTasks(context.Context, *ProbeTaskRequest) (*ProbeTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProbeTasks not implemented")
}
func (UnimplementedProbeTaskServiceServer) mustEmbedUnimplementedProbeTaskServiceServer() {}
func (UnimplementedProbeTaskServiceServer) testEmbeddedByValue()                          {}

// UnsafeProbeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeTaskServiceServer will
// result in compilation errors.
type UnsafeProbeTaskServiceServer interface {
	mustEmbedUnimplementedProbeTaskServiceServer()
}

func RegisterProbeTaskServiceServer(s grpc.ServiceRegistrar, srv ProbeTaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedProbeTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProbeTaskService_ServiceDesc, srv)
}

func _ProbeTaskService_SendProbeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeTaskServiceServer).SendProbeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProbeTaskService_SendProbeTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeTaskServiceServer).SendProbeTasks(ctx, req.(*ProbeTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProbeTaskService_ServiceDesc is the grpc.ServiceDesc for ProbeTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProbeTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "probe.ProbeTaskService",
	HandlerType: (*ProbeTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendProbeTasks",
			Handler:    _ProbeTaskService_SendProbeTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/probe.proto",
}

const (
	ProbeResultService_SendProbeResults_FullMethodName = "/probe.ProbeResultService/SendProbeResults"
)

// ProbeResultServiceClient is the client API for ProbeResultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 数据面向控制面上报多个探测结果
type ProbeResultServiceClient interface {
	// 上报多个探测结果
	SendProbeResults(ctx context.Context, in *ProbeResultRequest, opts ...grpc.CallOption) (*ProbeResultResponse, error)
}

type probeResultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeResultServiceClient(cc grpc.ClientConnInterface) ProbeResultServiceClient {
	return &probeResultServiceClient{cc}
}

func (c *probeResultServiceClient) SendProbeResults(ctx context.Context, in *ProbeResultRequest, opts ...grpc.CallOption) (*ProbeResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProbeResultResponse)
	err := c.cc.Invoke(ctx, ProbeResultService_SendProbeResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProbeResultServiceServer is the server API for ProbeResultService service.
// All implementations must embed UnimplementedProbeResultServiceServer
// for forward compatibility.
//
// 数据面向控制面上报多个探测结果
type ProbeResultServiceServer interface {
	// 上报多个探测结果
	SendProbeResults(context.Context, *ProbeResultRequest) (*ProbeResultResponse, error)
	mustEmbedUnimplementedProbeResultServiceServer()
}

// UnimplementedProbeResultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProbeResultServiceServer struct{}

func (UnimplementedProbeResultServiceServer) SendProbeResults(context.Context, *ProbeResultRequest) (*ProbeResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProbeResults not implemented")
}
func (UnimplementedProbeResultServiceServer) mustEmbedUnimplementedProbeResultServiceServer() {}
func (UnimplementedProbeResultServiceServer) testEmbeddedByValue()                            {}

// UnsafeProbeResultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeResultServiceServer will
// result in compilation errors.
type UnsafeProbeResultServiceServer interface {
	mustEmbedUnimplementedProbeResultServiceServer()
}

func RegisterProbeResultServiceServer(s grpc.ServiceRegistrar, srv ProbeResultServiceServer) {
	// If the following call pancis, it indicates UnimplementedProbeResultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProbeResultService_ServiceDesc, srv)
}

func _ProbeResultService_SendProbeResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeResultServiceServer).SendProbeResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProbeResultService_SendProbeResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeResultServiceServer).SendProbeResults(ctx, req.(*ProbeResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProbeResultService_ServiceDesc is the grpc.ServiceDesc for ProbeResultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProbeResultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "probe.ProbeResultService",
	HandlerType: (*ProbeResultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendProbeResults",
			Handler:    _ProbeResultService_SendProbeResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/probe.proto",
}
